 
import json
import locale
import sys
#import reports
#import emails

print("start!")
def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  DICT KEY :id, car, price and total_sales 
  """
  max_revenue = {"revenue": 0}
  max_sales = 0
  caryear_count = {}
  
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
      # TODO: also handle max sales 
    
    if item["total_sales"]> max_sales:
       max_sales = item["total_sales"]   
       max_sales_car = item["car"]

    # TODO: also handle most popular car_year
    if item["car"]["car_year"] not in caryear_count.keys():
        key = item["car"]["car_year"]
        caryear_count[key]=item["total_sales"]
    else:
        key = item["car"]["car_year"]
        caryear_count[key] += item["total_sales"]
  #print(caryear_count)
  maxcountinyear = None
  maxyear = None
  for keys, values in caryear_count.items():
    if maxcountinyear is None or values > maxcountinyear :
        maxcountinyear = values
        maxyear =keys

  #print('popular year: ', maxyear)
  #print( max_revenue)
  summary = [
    "The {} generated the most revenue: ${} ".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]), 
    "The {} had the most sales: {}".format(
         format_car(max_sales_car ), max_sales),
    "The most popular year was {} with {} sales.".format(
         maxyear, maxcountinyear),
  ]
  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

data = load_data("cars.json")
summary = process_data(data)
lines=''
for line in summary:
    print(type(line))
    print(line)
    line += line+'\n' 
print(line)

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("cars.json")
  summary = process_data(data)
  print(summary)
  for line in summary:
    print(type(line))
    #line += line + '\n' 
  #print(line)
  
  # TODO: turn this into a PDF report use: reports.generate() -> '/tmp/cars.pdf'
  reportlist = cars_dict_to_table(data)
  reports.generate("/tmp/cars.pdf","Sales summary for last month",lines.replace("\n","<br/>"),reportlist)

  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "<user>@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = lines
  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
  emails.send(message)
  
  print("ended")
  ###As optional challenges, you could try some of the following functionalities: 
  # Sort the list of cars in the PDF by total sales.
  # Create a pie chart for the total sales of each car made.
  # Create a bar chart showing total sales for the top 10 best selling vehicles using the ReportLab Diagra library. Put the vehicle name on the X-axis and total revenue (remember, price * total sales!) along the Y-axis.